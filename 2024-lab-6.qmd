---
title: "lab 6 - Time Series Methods"
subtitle: "BSMM 8740 Fall 2024"
author: "THI BAO HAN TRUONG"
format: html
editor: visual
self-contained: true
---

## Introduction

In today's lab, you'll practice building `workflows` with `recipes`, `parsnip` models, `rsample` cross validations, and model comparison in the context of time series data.

## Getting started

-   To complete the lab, log on to **your** github account and then go to the class [GitHub organization](https://github.com/bsmm-8740-fall-2024) and find the **2024-lab-6-\[your github username\]** repository .

    Create an R project using your **2024-lab-6-\[your github username\]** repository (remember to create a PAT, etc.) and add your answers by editing the `2024-lab-6.qmd` file in your repository.

-   When you are done, be sure to: **save** your document, **stage**, **commit** and [**push**]{.underline} your work.

::: callout-important
To access Github from the lab, you will need to make sure you are logged in as follows:

-   username: **.\\daladmin**
-   password: **Business507!**

Remember to (create a PAT and set your git credentials)

-   create your PAT using `usethis::create_github_token()` ,
-   store your PAT with `gitcreds::gitcreds_set()` ,
-   set your username and email with
    -   `usethis::use_git_config( user.name = ___, user.email = ___)`
:::

## Packages

```{r}
#| echo: false
#| message: false
#| warning: false
# check if 'librarian' is installed and if not, install it
if (! "librarian" %in% rownames(installed.packages()) ){
  install.packages("librarian")
}
  
# load packages if not already loaded
librarian::shelf(tidyverse, Lahman, magrittr, gt, gtExtras, ggplot2, tidymodels, modeltime, timetk, parsnip, fable)
theme_set(theme_bw(base_size = 18) + theme(legend.position = "top"))

# set the efault theme for plotting
theme_set(theme_bw(base_size = 18) + theme(legend.position = "top"))
```

## The Data

Today we will be using electricity demand data, based on a paper by James W Taylor:

> Taylor, J.W. (2003) Short-term electricity demand forecasting using double seasonal exponential smoothing. Journal of the Operational Research Society, 54, 799-805.

The data can be found in the `timetk` package as `timetk::taylor_30_min`, a tibble with dimensions: 4,032 x 2

-   `date`: A date-time variable in 30-minute increments

-   `value`: Electricity demand in Megawatts

```{r}
#| eval: true
#| message: false
#| warning: false
data <- timetk::taylor_30_min
```

## Exercise 1: EDA

Plot the data using the functions `timetk::plot_time_series`, `timetk::plot_acf_diagnostics` (using 100 lags), and `timetk::plot_seasonal_diagnostics`.

::: {.callout-note appearance="simple" icon="false"}
## YOUR ANSWER:

```{r}
# timetk::plot_time_series
plot_time_series(.data = data, .date_var = date, .value = value)
```

```{r}
# timetk::plot_acf_diagnostics
plot_acf_diagnostics(.data = data, .date_var = date, .value = value, .lags = 100)
```

```{r}
# timetk::plot_seasonal_diagnostics
plot_seasonal_diagnostics(.data = data, .date_var = date, .value = value)
```
:::

## Exercise 2: Time scaling

The raw data has 30 minute intervals between data points. Downscale the data to 60 minute intervals, using `timetk::summarise_by_time`, revising the electricity demand (value) variable by adding the two 30-minute intervals in each 60-minute interval. Assign the downscaled data to the variable `taylor_60_min`.

::: {.callout-note appearance="simple" icon="false"}
## YOUR ANSWER:

```{r}
# downscale the data (down to a lower frequency of measurement)
set.seed(8740)
taylor_60_min <- data %>%
  summarise_by_time(
    .date_var = date,
    .by = "1 hour",           
    value = sum(value)         
  )
```
:::

## Exercise 3: Training and test datasets

1.  Split the new (60 min) time series into training and test sets using `timetk::time_series_split`
    1.  set the training period ('initial') to '2 months' and the assessment period to '1 weeks'
2.  Prepare the data resample specification with `timetk::tk_time_series_cv_plan()` and plot it with `timetk::plot_time_series_cv_plan`
3.  Separate the training and test data sets using `rsample` .

::: {.callout-note appearance="simple" icon="false"}
## YOUR ANSWER:

```{r}
# split
splits <- time_series_split(
  taylor_60_min,
  date_var = date,
  initial = "2 months",
  assess = "1 weeks",
  cumulative = FALSE
)
```

```{r}
# plot splits
cv_plan <- tk_time_series_cv_plan(splits)

timetk::plot_time_series_cv_plan(
  .data = cv_plan, 
  .date_var = date, 
  .value = value
)
```

```{r}
# separate into train and test data sets
training_data <- training(splits)

test_data <- testing(splits)
```
:::

## Exercise 4: recipes

1.  Create a base recipe (base_rec) using the formula `value ~ date` and the training data. This will be used for non-regression models

2.  Create a recipe (lm_rec) using the formula `value ~ .` and the `training` data. This will be used for regression models. For this recipe:

    1.  add time series signature features using `timetk::step_timeseries_signature` with the appropriate argument,
    2.  add a step to select the columns `value`, `date_index.num`, `date_month.lbl`, `date_wday.lbl`, `date_hour` ,
    3.  add a normalization step targeting `date_index.num` ,
    4.  add a step to mutate `date_hour`, changing it to a factor,
    5.  add a step to one-hot encode nominal predictors.

::: {.callout-note appearance="simple" icon="false"}
## YOUR ANSWER:

```{r}
# base recipe
base_rec <- recipe(value ~ date, data = training_data)
 
# recipe
lm_rec <- recipe(value ~ ., data = training_data)

lm_rec <- lm_rec %>%
  step_timeseries_signature(date) %>%
  step_select(value, date_index.num, date_month.lbl, date_wday.lbl, date_hour) %>% 
  step_normalize(date_index.num) %>%
  step_mutate(date_hour = as.factor(date_hour)) %>%
  step_dummy(all_nominal_predictors(), one_hot = TRUE)

```
:::

## Exercise 5 models

Now we will create a several models to estimate electricity demand, as follows

1.  Create a model specification for an exponential smoothing model using engine 'ets'
2.  Create a model specification for an arima model using engine 'auto_arima'
3.  Create a model specification for a linear model using engine 'glmnet' and penalty = 0.02, mixture = 0.5

::: {.callout-note appearance="simple" icon="false"}
## YOUR ANSWER:

```{r}
model_ets <- exp_smoothing() %>% set_engine("ets")
  
model_arima <- arima_reg() %>% set_engine("auto_arima")
  
model_lm <- linear_reg(penalty = 0.02, mixture = 0.5) %>% set_engine("glmnet")
```
:::

## Exercise 6 model fitting

Create a workflow **for each model** using `workflows::workflow`.

1.  Add a recipe to the workflow
    1.  the linear model uses the `lm_rec` recipe created above
    2.  the `ets` and `arima` models use the `base_rec` recipe created above
2.  Add a model to each workflow
3.  Fit with the training data

::: {.callout-note appearance="simple" icon="false"}
## YOUR ANSWER:

glmnet_fit

```{r}
workflow_fit_ets <- workflow() %>%
  add_recipe(base_rec) %>%
  add_model(model_ets)
  
workflow_fit_arima <- workflow() %>%
  add_recipe(base_rec) %>%
  add_model(model_arima)
  
workflow_fit_lm <- workflow() %>%
  add_recipe(lm_rec) %>%
  add_model(model_lm)

ets_fit <- fit(workflow_fit_ets, data = training_data)

arima_fit <- fit(workflow_fit_arima, data = training_data)

lm_fit <- fit(workflow_fit_lm, data = training_data)
```
:::

::: render-commit-push
This is a good place to **save**, **stage**, **commit**, and **push** changes to your remote lab repo on GitHub. Click the checkbox next to each file in the Git pane to stage the updates you've made, write an informative commit message, and push. After you push the changes, the Git pane in RStudio should be empty.
:::

## Exercise 7: calibrate

In this exercise we'll use the **testing data** with our fitted models.

1.  Create a table with the fitted workflows using `modeltime::modeltime_table`
2.  Using the table you just created, run a calibration on the **test data** with the function `modeltime::modeltime_calibrate`.
3.  Compare the accuracy of the models using the `modeltime::modeltime_accuracy()` on the results of the calibration

::: {.callout-note appearance="simple" icon="false"}
## YOUR ANSWER:

```{r}
model_tbl <- modeltime::modeltime_table(ets_fit, arima_fit, lm_fit)

calibration_tbl <- model_tbl %>% modeltime_calibrate(new_data = test_data)
  
accuracy_tbl <- calibration_tbl %>% modeltime_accuracy()

```

::: callout-important
Which is the best model by the **rmse** metric?

The `accuracy_tbl` will show RMSE values for each model, and best model has the smallest RMSE, indicating the best-performing model by this metric. In this case, glmnet is the best model, with rmse = 3573.
:::
:::

## Exercise 8: forecast - training data

Use the calibration table with `modeltime::modeltime_forecast` to graphically compare the fits to the training data with the observed values.

::: {.callout-note appearance="simple" icon="false"}
## YOUR ANSWER:

```{r}
# Generate forecasts for the training and test data using the calibration table
forecast_tbl <- calibration_tbl %>%
  modeltime_forecast(
    new_data = test_data,     
    actual_data = training_data
  )


```
:::

## Exercise 9: forecast - future

Now refit the models using the **full data set** (using the calibration table and `modeltime::modeltime_refit`). Save the result in the variable **refit_tbl**.

1.  Use the refit data in the variable **refit_tbl**, along with `modeltime::modeltime_forecast` and argument `h` = '2 weeks' (remember to also set the `actual_data` argument). This will use the models to forecast electricity demand two weeks into the future.
2.  Plot the forecast with `modeltime::plot_modeltime_forecast`

::: {.callout-note appearance="simple" icon="false"}
## YOUR ANSWER:

```{r}
# Refit the models using the full data set
refit_tbl <- calibration_tbl %>%
  modeltime_refit(data = data)

# Forecast electricity demand for the next 2 weeks
forecast_future_tbl <- refit_tbl %>%
  modeltime_forecast(
    h = '2 weeks',            
    actual_data = data   
  )

# Plot the forecast
forecast_future_tbl %>%
  plot_modeltime_forecast(
    .legend_max_width = 25,      
    .interactive = FALSE      
  )

```
:::

::: render-commit-push
You're done and ready to submit your work! **Save**, **stage**, **commit**, and **push** all remaining changes. You can use the commit message "Done with Lab 6!" , and make sure you have committed and pushed all changed files to GitHub (your Git pane in RStudio should be empty) and that **all** documents are updated in your repo on GitHub.
:::

::: callout-warning
## Submission

I will pull (copy) everyone's repository submissions at 5:00pm on the Sunday following class, and I will work only with these copies, so anything submitted after 5:00pm will not be graded. (**don't forget to commit and then push your work!**)
:::

## Grading

Total points available: 30 points.

| Component | Points |
|-----------|--------|
| Ex 1 - 9  | 30     |
